F90 = ftn
F90_OPTS = -O3 -ip -unroll -scalar_rep -dynamic -xCORE-AVX-I -qopenmp 
CPP_ON_OPTS = -cpp -DXS -DISO -DLIBXC -DUSEOMP
F77 = $(F90)
F77_OPTS = -O3
LIB_ARP =libarpack.a
export USE_SYS_LAPACK=true
LIB_LPK = -mkl=parallel 
LIB_FFT = fftlib.a
LIB_BZINT = libbzint.a

LIBS = $(LIB_ARP) $(LIB_LPK) $(LIB_FFT) $(LIB_BZINT)

F90_DEBUGOPTS = -g -O0 -debug all -implicitnone -warn unused \
   -fp-stack-check -heap-arrays -ftrapuv -check pointers \
   -check bounds -check all -check noarg_temp_created -traceback
F77_DEBUGOPTS = -g -O0 -debug all -implicitnone -warn unused \
   -fp-stack-check -heap-arrays -ftrapuv -check pointers \
   -check bounds -check all -check noarg_temp_created -traceback

#Ignore if you don't have MPI or smplibs

# check for the correct name of your mpif90 compiler
#MPIF90 = ftn -fopenmp  
MPIF90 = ftn -dynamic -xCORE-AVX-I
MPIF90_OPTS = $(F90_OPTS) $(CPP_ON_OPTS) -DMPI -DMPIRHO -DMPISEC 

F77MT=$(F77)
F90MT=$(F90)
SMP_LIBS = $(LIB_ARP) -mkl=parallel  $(LIB_FFT) $(LIB_BZINT)
SMPF90_OPTS = $(F90_OPTS)
SMPF77_OPTS = $(SMPF90_OPTS)
MPISMPF90_OPTS = $(SMPF90_OPTS) -DMPI -DMPIRHO -DMPISECBUILDMPI=false
MPIF90MT = $(MPIF90)
BUILDMPI = true
BUILDSMP = true

# Processor architecture for login and compute nodes (LNODE and CNODE resp.)
# Set CNODE_ARCH to ivybridge or haswell. This setting must
# conincide with the loaded module in HLRN at compile time, 
# correspondingly: craype-ivybridge or craype-haswell.
# Code compiled using haswell features will work on mpp2q queue 
# but could not work on other queues (check HLRN documentation).
# Set LNODE_ARCH to the login node architecture, usually sandybridge or ivybridge.  

CNODE_ARCH = ivybridge
LNODE_ARCH = sandybridge

HLRN = true
